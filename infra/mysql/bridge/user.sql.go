// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package bridge

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users(name, password) VALUES(?, ?)
`

type CreateUserParams struct {
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, password FROM users WHERE id = ?
`

type FindUserByIDRow struct {
	ID       int64
	Name     string
	Password string
}

func (q *Queries) FindUserByID(ctx context.Context, id int64) (FindUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i FindUserByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const findUserByName = `-- name: FindUserByName :many
SELECT id, name FROM users WHERE name LIKE ?
`

type FindUserByNameRow struct {
	ID   int64
	Name string
}

func (q *Queries) FindUserByName(ctx context.Context, name string) ([]FindUserByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, findUserByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUserByNameRow
	for rows.Next() {
		var i FindUserByNameRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByNameToLogin = `-- name: FindUserByNameToLogin :one
SELECT id, name, password FROM users WHERE name = ?
`

type FindUserByNameToLoginRow struct {
	ID       int64
	Name     string
	Password string
}

func (q *Queries) FindUserByNameToLogin(ctx context.Context, name string) (FindUserByNameToLoginRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByNameToLogin, name)
	var i FindUserByNameToLoginRow
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const findUsers = `-- name: FindUsers :many
SELECT id, name, password FROM users
`

type FindUsersRow struct {
	ID       int64
	Name     string
	Password string
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = ? WHERE id = ?
`

type UpdateUserParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.ID)
	return err
}
